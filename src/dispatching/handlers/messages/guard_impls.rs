use crate::{
    dispatching::{
        core::{Guard, IntoGuard, Context},
        handlers::messages::message_parser::MessageHandlerBuilder,
    },
    types,
    types::Message,
};
use crate::dispatching::core::GetCtx;
use crate::dispatching::dispatcher_context::DispatcherContext;

impl Message {
    fn get_id(&self) -> Option<&i32> {
        Some(&self.id)
    }
    fn get_chat(&self) -> Option<&types::Chat> {
        Some(&self.chat)
    }
    fn get_date(&self) -> Option<&i32> {
        Some(&self.date)
    }
    fn get_chat_id(&self) -> Option<&i64> {
        Some(&self.chat.id)
    }
    fn get_via_bot(&self) -> Option<&types::User> {
        self.via_bot.as_ref()
    }
}

mod generated {
    use crate::dispatching::{core::{IntoGuard, GetCtx, Context}, dispatcher_context::DispatcherContext};
    /// This mod was generated by macros

    macro_rules! impl_with_and_or {
    ($(($ident:ident, $item:ty, $get_field:expr),)*) => {$(const _: () = {
        struct Checker<G> {
            guard: G,
        }

        impl<Ctx, G: Guard<$item>> Guard<Ctx> for Checker<G>
        where
            Ctx: GetCtx<DispatcherContext<Message>>
        {
            fn check<'a>(&self, cx: &'a Ctx) -> BoxFuture<'a, bool> {
                let cx = cx.get();
                match $get_field(&cx.upd) {
                    Some(x) => self.guard.check(x),
                    None => Box::pin(futures::future::ready(false)) as _,
                }
            }
        }

        impl<Ctx, G: Guard<$item>> IntoGuard<Ctx, Checker<G>> for Checker<G>
         where
            Ctx: GetCtx<DispatcherContext<Message>>
         {
            fn into_guard(self) -> Self {
                self
            }
        }
        paste::paste! {
        impl<Ctx, UpdateParser, Err: Send + 'static> MessageHandlerBuilder<Ctx, UpdateParser, Err>
        where
            Ctx: Context<Upd = Message> + GetCtx<DispatcherContext<Message>> + Send + Sync + 'static,
         {
            pub fn [<with_ $ident>]<G: Guard<$item> + Send + Sync + 'static>(self, guard: impl IntoGuard<$item, G> + 'static) -> Self {
                let checker = Checker { guard: guard.into_guard() };
                self.with_guard(checker)
            }
            pub fn [<or_with_ $ident>]<G: Guard<$item> + Send + Sync + 'static>(self, guard: impl IntoGuard<$item, G> + 'static) -> Self {
                let checker = Checker { guard: guard.into_guard() };
                self.or_with_guard(checker)
            }
        }
        }
    };)*}
}
    macro_rules! impl_has_and_no_has {
    ($(($ident:ident, $get_field:expr),)*) => {
        $(const _: () = {
            paste::paste! {
            impl<Ctx, UpdateParser, Err: Send + 'static> MessageHandlerBuilder<Ctx, UpdateParser, Err>
            where
                Ctx: Context<Upd = Message> + Send + Sync + 'static,
            {
                pub fn [<has_ $ident>](self) -> Self {
                    self.with_guard(|mes: &Message| $get_field(mes).is_some())
                }
                pub fn [<or_has_ $ident>](self) -> Self {
                    self.or_with_guard(|mes: &Message| $get_field(mes).is_some())
                }
                pub fn [<no_has_ $ident>](self) -> Self {
                    self.with_guard(|mes: &Message| $get_field(mes).is_none())
                }
                pub fn [<or_no_has_ $ident>](self) -> Self {
                    self.or_with_guard(|mes: &Message| $get_field(mes).is_none())
                }
            }
            }
        };)*
    };
    }
    macro_rules! impl_both_with_and_has {
    ($(($ident:ident, $item:ty, $get_field:expr),)*) => {
        impl_with_and_or!($(($ident, $item, $get_field),)*);
        impl_has_and_no_has!($(($ident, $get_field),)*);
    };
    }

    impl_with_and_or! {
        (id, i32, Message::get_id),
        (chat, types::Chat, Message::get_chat),
        (date, i32, Message::get_date),
        (chat_id, i64, Message::get_chat_id),
        (via_bot, types::User, Message::get_via_bot),
    }
    impl_both_with_and_has! {
        (from, types::User, Message::from),
        (forward_from, types::ForwardedFrom, Message::forward_from),
        (forward_from_chat, types::Chat, Message::forward_from_chat),
        (forward_from_message_id, i32, Message::forward_from_message_id),
        (forward_signature, str, Message::forward_signature),
        (forward_date, i32, Message::forward_date),
        (reply_to_message, Message, Message::reply_to_message),
        (edit_date, i32, Message::edit_date),
        (media_group_id, str, Message::media_group_id),
        (text, str, Message::text),
        (entities, [types::MessageEntity], Message::entities),
        (caption_entities, [types::MessageEntity], Message::caption_entities),
        (audio, types::Audio, Message::audio),
        (document, types::Document, Message::document),
        (animation, types::Animation, Message::animation),
        (game, types::Game, Message::game),
        (photo, [types::PhotoSize], Message::photo),
        (sticker, types::Sticker, Message::sticker),
        (video, types::Video, Message::video),
        (voice, types::Voice, Message::voice),
        (video_note, types::VideoNote, Message::video_note),
        (caption, str, Message::caption),
        (contact, types::Contact, Message::contact),
        (venue, types::Venue, Message::venue),
        (poll, types::Poll, Message::poll),
        (new_chat_members, [types::User], Message::new_chat_members),
        (left_chat_member, types::User, Message::left_chat_member),
        (new_chat_title, str, Message::new_chat_title),
        (new_chat_photo, [types::PhotoSize], Message::new_chat_photo),
        (migrate_to_chat_id, i64, Message::migrate_to_chat_id),
        (migrate_from_chat_id, i64, Message::migrate_from_chat_id),
        (pinned_message, Message, Message::pinned_message),
        (invoice, types::Invoice, Message::invoice),
        (successful_payment, types::SuccessfulPayment, Message::successful_payment),
        (connected_website, str, Message::connected_website),
        (passport_data, types::PassportData, Message::passport_data),
    }
    impl_has_and_no_has! {
        (delete_chat_photo, Message::delete_chat_photo),
        (group_chat_created, Message::group_chat_created),
        (super_group_chat_created, Message::super_group_chat_created),
        (channel_chat_created, Message::channel_chat_created),
    }

    use crate::{
        dispatching::{core::Guard, handlers::messages::message_parser::MessageHandlerBuilder},
        types,
        types::Message,
    };
    use futures::future::BoxFuture;
}

impl<Ctx, UpdateParser, Err: Send + 'static> MessageHandlerBuilder<Ctx, UpdateParser, Err>
where
    Ctx: Context<Upd = Message> + GetCtx<DispatcherContext<Message>> + Send + Sync + 'static,
{
    pub fn with_entities_or_caption_entities<
        G: Guard<[types::MessageEntity]> + Send + Sync + 'static,
    >(
        self,
        guard: impl IntoGuard<[types::MessageEntity], G> + Clone + 'static,
    ) -> Self {
        self.with_entities(guard.clone()).or_with_caption_entities(guard)
    }
    pub fn with_text_or_caption<G: Guard<str> + Send + Sync + 'static>(
        self,
        guard: impl IntoGuard<str, G> + Clone + 'static,
    ) -> Self {
        self.with_text(guard.clone()).or_with_caption(guard)
    }
}

impl<Ctx, UpdateParser, Err: Send + 'static> MessageHandlerBuilder<Ctx, UpdateParser, Err>
where
    Ctx: Context<Upd = Message> + GetCtx<DispatcherContext<Message>> + Send + Sync + 'static,
{
    pub fn or_with_entities_or_caption_entities<
        G: Guard<[types::MessageEntity]> + Send + Sync + 'static,
    >(
        self,
        guard: impl IntoGuard<[types::MessageEntity], G> + Clone + 'static,
    ) -> Self {
        self.or_with_entities(guard.clone()).or_with_caption_entities(guard)
    }

    pub fn or_with_text_or_caption<G: Guard<str> + Send + Sync + 'static>(
        self,
        guard: impl IntoGuard<str, G> + Clone + 'static,
    ) -> Self {
        self.or_with_text(guard.clone()).or_with_caption(guard)
    }
}

impl<Ctx, UpdateParser, Err: Send + 'static> MessageHandlerBuilder<Ctx, UpdateParser, Err>
where
    Ctx: Context<Upd = Message> + Send + Sync + 'static,
{
    pub fn has_entities_or_caption_entities(self) -> Self {
        self.has_entities().or_has_caption_entities()
    }

    pub fn has_text_or_caption(self) -> Self {
        self.has_text().or_has_caption()
    }
}

impl<Ctx, UpdateParser, Err: Send + 'static> MessageHandlerBuilder<Ctx, UpdateParser, Err>
where
    Ctx: Context<Upd = Message> + Send + Sync + 'static,
{
    pub fn or_has_entities_or_caption_entities(self) -> Self {
        self.or_has_entities().or_has_caption_entities()
    }

    pub fn or_has_text_or_caption(self) -> Self {
        self.or_has_text().or_has_caption()
    }
}
